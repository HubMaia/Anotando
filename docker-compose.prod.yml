version: '3'

services:
  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: anotandodb
    # Removido as portas expostas para produção (acesso apenas interno)
    volumes:
      - db_data:/var/lib/mysql
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1234"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: always
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: 1234
      DB_NAME: anotandodb
      JWT_SECRET: JWT_SECRET
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    restart: always
    depends_on:
      backend:
        condition: service_started

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - frontend

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 1d & wait $${!}; done'"
    # isso mantém o container vivo, útil para usar com renew se quiser

volumes:
  db_data:
